// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           String        @id @default(uuid())
  email        String?       @unique
  profile      Profile?
  isCertified  Boolean       @default(false)
  posts        Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]
  following    Users[]       @relation("Following")
  followers    Users[]       @relation("Following")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Profile {
  userId String @id
  user   Users  @relation(fields: [userId], references: [id])

  profileName      String  @unique
  blogName         String?
  backgroundImgUrl String?
  profileImgUrl    String?
  shortBio         String  @default("")
  github           String?
  twitter          String?
  facebook         String?
  homepage         String?
}

model Post {
  id          String     @id @default(uuid())
  title       String
  body        String
  thumbnail   String?
  isPublished Boolean    @default(true)
  authorId    String
  user        Users      @relation(fields: [authorId], references: [id])
  urlSlug     String     @unique
  tags        Tag[]
  views       Int        @default(0)
  postScore   Int        @default(0)
  likes       PostLike[]
  comments    Comment[]  @relation()
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String        @id @default(uuid())
  replyTo   String
  text      String
  deleted   Boolean       @default(false)
  userId    String
  user      Users         @relation(fields: [userId], references: [id])
  postId    String
  post      Post          @relation(fields: [postId], references: [id])
  likes     CommentLike[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  thumbnail   String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
