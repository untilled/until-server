// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          String     @id @default(uuid())
  email       String     @unique
  profile     Profile?
  posts       Post[]     @relation("Posts")
  comments    Comment[]
  starredPost Post[]     @relation("starredPost")
  following   Users[]    @relation("Following")
  followers   Users[]    @relation("Following")
  activity    Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Profile {
  userId String @id
  user   Users  @relation(fields: [userId], references: [id])

  profileName      String  @unique
  blogName         String
  backgroundImgUrl String?
  profileImgUrl    String?
  shortBio         String  @default("")
  github           String?
  twitter          String?
  facebook         String?
  homepage         String?
}

model Activity {
  id               String       @id @default(dbgenerated())
  userId           String
  user             Users        @relation(fields: [userId], references: [id])
  activityTypeName String
  activityType     ActivityType @relation(fields: [activityTypeName], references: [name])
  activityData     String?
  createdAt        DateTime     @default(now())
}

model ActivityType {
  name     String     @id
  Activity Activity[]
}

model Post {
  id           String    @id @default(uuid())
  title        String
  body         String
  thumbnail    String?
  isPublished  Boolean   @default(true)
  authorId     String
  user         Users     @relation(name: "Posts", fields: [authorId], references: [id])
  urlSlug      String    @unique
  tags         Tag[]
  views        Int       @default(0)
  postScore    Int       @default(0)
  starredUsers Users[]   @relation("starredPost")
  comments     Comment[] @relation()
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model Comment {
  id        String    @id @default(uuid())
  replyTo   String
  text      String
  deleted   Boolean   @default(false)
  userId    String
  user      Users     @relation(fields: [userId], references: [id])
  postId    String
  post      Post      @relation(fields: [postId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Tag {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  thumbnail   String?
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}
